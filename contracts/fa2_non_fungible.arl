archetype fa2_non_fungible(owner : address)

asset ledger identified by ltoken_id to big_map {
  ltoken_id : nat;
  lowner    : address;
  lmetadata : string;
}

asset operators identified by oowner ooperator otoken_id to big_map {
    oowner    : address;
    ooperator : address;
    otoken_id : nat;
}

record transfer_param {
    tto       : address;
    ttoken_id : nat;
    tamount   : nat;
}

entry %transfer(from_: address, tsx: list<transfer_param>){
    for tx in tsx do 
        do_require(tx.tamount = 1, "NOT_ONE");
        do_require(caller = from_ or operators.contains((from_, caller, tx.ttoken_id)), "INVALID_CALLER");
        do_require(ledger[tx.ttoken_id].lowner = from_, "NOT_OWNER");
        ledger.update(tx.ttoken_id, {lowner = tx.tto});
    done
}


enum update_operator_variant =
| add_operator
| remove_operator


record update_operator_params {
    uotype     : update_operator_variant;
    uoowner    : address;
    uooperator : address;
    uotoken_id : nat
}

entry update_operator(updates: list<update_operator_params>){
    for up in updates do
        match up.uotype with 
        | add_operator ->
          do_require(up.uoowner = caller, "CALLER_NOT_OWNER");
          operators.put({ up.uoowner; up.uooperator; up.uotoken_id })
        | remove_operator -> 
          do_require(up.uoowner = caller, "CALLER_NOT_OWNER");
          operators.remove((up.uoowner, up.uooperator, up.uotoken_id))
        end
    done
}

record balance_of_request {
    browner    : address;
    brtoken_id : nat;
}

record balance_of_response {
    request : balance_of_request;
    brbalance: nat;
}

getter balance_of(requests: list<balance_of_request>) : list<balance_of_response> {
    return map(requests, br -> {
        request = br;
        brbalance = (ledger[br.brtoken_id] ? (the.lowner = br.browner ? 1 : 0) : 0)
    })
}

entry mint(to_: address, token_id: nat, token_metadata: string) {
    called by owner
    effect {
        ledger.add({ ltoken_id = token_id; lowner = to_; lmetadata = token_metadata});
    }
}




